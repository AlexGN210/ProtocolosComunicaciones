
UART_Alexis.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000224  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  00000298  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009a3  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007f5  00000000  00000000  00000d33  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004ef  00000000  00000000  00001528  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000010c  00000000  00000000  00001a18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f0  00000000  00000000  00001b24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001f4  00000000  00000000  00001f14  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002108  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a6 30       	cpi	r26, 0x06	; 6
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 7a 00 	call	0xf4	; 0xf4 <main>
  88:	0c 94 10 01 	jmp	0x220	; 0x220 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_14>:
int timer;   //Variable global
int timer2;  //Variable global
int bandera; //Variable global


ISR(TIMER0_COMPA_vect) {
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	2f 93       	push	r18
  9c:	3f 93       	push	r19
  9e:	8f 93       	push	r24
  a0:	9f 93       	push	r25
	timer++;
  a2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  a6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  aa:	01 96       	adiw	r24, 0x01	; 1
  ac:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  b0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	timer2++;
  b4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <timer2>
  b8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <timer2+0x1>
  bc:	2f 5f       	subi	r18, 0xFF	; 255
  be:	3f 4f       	sbci	r19, 0xFF	; 255
  c0:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <timer2+0x1>
  c4:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <timer2>
	if (timer >= 5000) { // Si han pasado 3000 interrupciones (3 segundos) | Variable para el finalizado de lectura
  c8:	88 38       	cpi	r24, 0x88	; 136
  ca:	93 41       	sbci	r25, 0x13	; 19
  cc:	54 f0       	brlt	.+20     	; 0xe2 <__vector_14+0x52>
		bandera= 1;
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <bandera+0x1>
  d6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <bandera>
		timer=0;
  da:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  de:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	
}
  e2:	9f 91       	pop	r25
  e4:	8f 91       	pop	r24
  e6:	3f 91       	pop	r19
  e8:	2f 91       	pop	r18
  ea:	0f 90       	pop	r0
  ec:	0f be       	out	0x3f, r0	; 63
  ee:	0f 90       	pop	r0
  f0:	1f 90       	pop	r1
  f2:	18 95       	reti

000000f4 <main>:

int main(void)
{	
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	cd b7       	in	r28, 0x3d	; 61
  fa:	de b7       	in	r29, 0x3e	; 62
  fc:	2f 97       	sbiw	r28, 0x0f	; 15
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	f8 94       	cli
 102:	de bf       	out	0x3e, r29	; 62
 104:	0f be       	out	0x3f, r0	; 63
 106:	cd bf       	out	0x3d, r28	; 61
	bandera = 0; //Variable global inicializada utilizada para saber cuando se excede el temporizador
 108:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <bandera+0x1>
 10c:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <bandera>
	timer = 0; //Variable global inicializada
 110:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 114:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	DDRD |= (1<<DDD1); //Tx Establecido como salida.
 118:	8a b1       	in	r24, 0x0a	; 10
 11a:	82 60       	ori	r24, 0x02	; 2
 11c:	8a b9       	out	0x0a, r24	; 10
	char buffer[BUFFER_SIZE]; // Buffer para almacenar la cadena recibida
	
	// Inicialización del puerto serie
	vTimerInit();  //Inicializar el timer.
 11e:	0e 94 a7 00 	call	0x14e	; 0x14e <vTimerInit>
	vSerialInit(); //Inicializar la comunicación serial.
 122:	0e 94 b6 00 	call	0x16c	; 0x16c <vSerialInit>
    
	while (1)
	{		
		
		vREADString(buffer); // Llamada a la función para leer una línea
 126:	ce 01       	movw	r24, r28
 128:	01 96       	adiw	r24, 0x01	; 1
 12a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <vREADString>
		vWRITEString(buffer); // Envío de la línea recibida
 12e:	ce 01       	movw	r24, r28
 130:	01 96       	adiw	r24, 0x01	; 1
 132:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <vWRITEString>
		vWRITEChar('\r'); // Salto de línea
 136:	8d e0       	ldi	r24, 0x0D	; 13
 138:	0e 94 cb 00 	call	0x196	; 0x196 <vWRITEChar>
		
				bandera = 0;
 13c:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <bandera+0x1>
 140:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <bandera>
				timer=0;
 144:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 148:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 14c:	ec cf       	rjmp	.-40     	; 0x126 <main+0x32>

0000014e <vTimerInit>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include "timer.h"

void vTimerInit(void){
	CLKPR = 0x80;
 14e:	e1 e6       	ldi	r30, 0x61	; 97
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 e8       	ldi	r24, 0x80	; 128
 154:	80 83       	st	Z, r24
	CLKPR = 0x00;
 156:	10 82       	st	Z, r1

	TCCR0A = (1 << WGM01);
 158:	82 e0       	ldi	r24, 0x02	; 2
 15a:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1 << CS02) | (1 << CS00);
 15c:	95 e0       	ldi	r25, 0x05	; 5
 15e:	95 bd       	out	0x25, r25	; 37
	TIMSK0 = (1 << OCIE0A);
 160:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	OCR0A = 7;
 164:	87 e0       	ldi	r24, 0x07	; 7
 166:	87 bd       	out	0x27, r24	; 39
	
	sei();
 168:	78 94       	sei
 16a:	08 95       	ret

0000016c <vSerialInit>:
#include <avr/io.h>
#include <string.h>
#include "serial.h"

void vSerialInit(void){
	CLKPR = 0x80;
 16c:	e1 e6       	ldi	r30, 0x61	; 97
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 e8       	ldi	r24, 0x80	; 128
 172:	80 83       	st	Z, r24
	CLKPR = 0x00;
 174:	10 82       	st	Z, r1
	UCSR0A = (0<<TXC0)|(1<<U2X0)|(0<<MPCM0);
 176:	82 e0       	ldi	r24, 0x02	; 2
 178:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	UCSR0B = (0<<RXCIE0)|(0<<TXCIE0)|(0<<UDRIE0)|(1<<RXEN0)|(1<<TXEN0)|(0<<UCSZ02)|(0<<TXB80);
 17c:	88 e1       	ldi	r24, 0x18	; 24
 17e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00) | (0 << USBS0);
 182:	86 e0       	ldi	r24, 0x06	; 6
 184:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	UBRR0 = 103; //(F_CPU/8/9600)-1; // Alexis.
 188:	87 e6       	ldi	r24, 0x67	; 103
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 190:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 194:	08 95       	ret

00000196 <vWRITEChar>:
}

	void vWRITEChar(char data){  //Escritura de un solo caracter.
		while ( !( UCSR0A & (1<<UDRE0)) );
 196:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 19a:	95 ff       	sbrs	r25, 5
 19c:	fc cf       	rjmp	.-8      	; 0x196 <vWRITEChar>
		UDR0 = data;
 19e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1a2:	08 95       	ret

000001a4 <vWRITEString>:
	}


	void vWRITEString(const char *str) { //Escritura de una cadena que mientras exista espacio en la cadena se enviará el dato.
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	ec 01       	movw	r28, r24
		while (*str) {
 1aa:	03 c0       	rjmp	.+6      	; 0x1b2 <vWRITEString+0xe>
			vWRITEChar(*str);
 1ac:	0e 94 cb 00 	call	0x196	; 0x196 <vWRITEChar>
			str++;
 1b0:	21 96       	adiw	r28, 0x01	; 1
		UDR0 = data;
	}


	void vWRITEString(const char *str) { //Escritura de una cadena que mientras exista espacio en la cadena se enviará el dato.
		while (*str) {
 1b2:	88 81       	ld	r24, Y
 1b4:	81 11       	cpse	r24, r1
 1b6:	fa cf       	rjmp	.-12     	; 0x1ac <vWRITEString+0x8>
			vWRITEChar(*str);
			str++;
		}
	}
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	08 95       	ret

000001be <vREADChar>:

	uint8_t vREADChar() { //Lectura de un solo carácter cuando esté disponible el slot
		while (!(UCSR0A & (1 << RXC0)));
 1be:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1c2:	88 23       	and	r24, r24
 1c4:	e4 f7       	brge	.-8      	; 0x1be <vREADChar>
		return UDR0;
 1c6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	}
 1ca:	08 95       	ret

000001cc <vREADString>:

	void vREADString(char* buffer) {
 1cc:	0f 93       	push	r16
 1ce:	1f 93       	push	r17
 1d0:	cf 93       	push	r28
 1d2:	df 93       	push	r29
 1d4:	8c 01       	movw	r16, r24
		int tambuf = -1; // Inicializado a -1 para que no se mande el salto de línea prueba "7"
		char char_recibido;  // Caracter recibido.
			
			for (int i = 0; i < BUFFER_SIZE; i++) {
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	05 c0       	rjmp	.+10     	; 0x1e6 <vREADString+0x1a>
				buffer[i] = '\0';
 1dc:	f8 01       	movw	r30, r16
 1de:	e8 0f       	add	r30, r24
 1e0:	f9 1f       	adc	r31, r25
 1e2:	10 82       	st	Z, r1

	void vREADString(char* buffer) {
		int tambuf = -1; // Inicializado a -1 para que no se mande el salto de línea prueba "7"
		char char_recibido;  // Caracter recibido.
			
			for (int i = 0; i < BUFFER_SIZE; i++) {
 1e4:	01 96       	adiw	r24, 0x01	; 1
 1e6:	8f 30       	cpi	r24, 0x0F	; 15
 1e8:	91 05       	cpc	r25, r1
 1ea:	c4 f3       	brlt	.-16     	; 0x1dc <vREADString+0x10>
 1ec:	cf ef       	ldi	r28, 0xFF	; 255
 1ee:	df ef       	ldi	r29, 0xFF	; 255
				buffer[i] = '\0';
				char_recibido = '\0';
			}
	
		do {
			char_recibido = vREADChar();
 1f0:	0e 94 df 00 	call	0x1be	; 0x1be <vREADChar>
			tambuf++; // Contador para recorrer el espacio de la variable.
 1f4:	21 96       	adiw	r28, 0x01	; 1
			buffer[tambuf] = char_recibido; //Escritura de la cadena.
 1f6:	f8 01       	movw	r30, r16
 1f8:	ec 0f       	add	r30, r28
 1fa:	fd 1f       	adc	r31, r29
 1fc:	80 83       	st	Z, r24

		} while (char_recibido != '>' && tambuf < BUFFER_SIZE && bandera==0); // Condición para poder salir con salto de línea, cuando se excede el buffer y cuando el timer se termina.
 1fe:	8e 33       	cpi	r24, 0x3E	; 62
 200:	49 f0       	breq	.+18     	; 0x214 <vREADString+0x48>
 202:	cf 30       	cpi	r28, 0x0F	; 15
 204:	d1 05       	cpc	r29, r1
 206:	34 f4       	brge	.+12     	; 0x214 <vREADString+0x48>
 208:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <bandera>
 20c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <bandera+0x1>
 210:	89 2b       	or	r24, r25
 212:	71 f3       	breq	.-36     	; 0x1f0 <vREADString+0x24>
		
		 buffer[tambuf] = '\0';  // Convertir en string para imprimir el dato recibido. Esto es simplemente para demostración en simulada del carácter.
 214:	10 82       	st	Z, r1
 216:	df 91       	pop	r29
 218:	cf 91       	pop	r28
 21a:	1f 91       	pop	r17
 21c:	0f 91       	pop	r16
 21e:	08 95       	ret

00000220 <_exit>:
 220:	f8 94       	cli

00000222 <__stop_program>:
 222:	ff cf       	rjmp	.-2      	; 0x222 <__stop_program>
