
I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000001a4  00000238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  0080010c  0080010c  00000244  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000274  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007a2  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006cf  00000000  00000000  00000a8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000028f  00000000  00000000  0000115d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  000013ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000037f  00000000  00000000  00001488  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ec  00000000  00000000  00001807  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000018f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__vector_24>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ea       	ldi	r30, 0xA4	; 164
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 31       	cpi	r26, 0x13	; 19
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c2 00 	call	0x184	; 0x184 <main>
  9e:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initI2C_slave>:
#define SLAVE_ADDRESS 0x29

volatile char receivedData[6]; // Max word length + null terminator

void initI2C_slave(uint8_t address) {
	TWAR = (address << 1);
  a6:	88 0f       	add	r24, r24
  a8:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
	TWCR = (1<<TWEN) | (1<<TWEA) | (1<<TWIE);
  ac:	85 e4       	ldi	r24, 0x45	; 69
  ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  b2:	08 95       	ret

000000b4 <i2c_receive_event>:
}

void i2c_receive_event() {
	static uint8_t index = 0;

	if ((TWSR & 0xF8) == TW_SR_DATA_ACK) {
  b4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  b8:	88 7f       	andi	r24, 0xF8	; 248
  ba:	80 38       	cpi	r24, 0x80	; 128
  bc:	99 f5       	brne	.+102    	; 0x124 <i2c_receive_event+0x70>
		receivedData[index] = TWDR;
  be:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
  c2:	e8 2f       	mov	r30, r24
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  ca:	e3 5f       	subi	r30, 0xF3	; 243
  cc:	fe 4f       	sbci	r31, 0xFE	; 254
  ce:	90 83       	st	Z, r25
		index++;
  d0:	8f 5f       	subi	r24, 0xFF	; 255
  d2:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>

		if (index >= sizeof(receivedData)) {
  d6:	86 30       	cpi	r24, 0x06	; 6
  d8:	28 f1       	brcs	.+74     	; 0x124 <i2c_receive_event+0x70>
			index = 0;
  da:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>

			if (strcmp(receivedData, "Cake") == 0) {
  de:	60 e0       	ldi	r22, 0x00	; 0
  e0:	71 e0       	ldi	r23, 0x01	; 1
  e2:	8d e0       	ldi	r24, 0x0D	; 13
  e4:	91 e0       	ldi	r25, 0x01	; 1
  e6:	0e 94 c7 00 	call	0x18e	; 0x18e <strcmp>
  ea:	89 2b       	or	r24, r25
  ec:	39 f4       	brne	.+14     	; 0xfc <i2c_receive_event+0x48>
				TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWEA);
  ee:	84 ec       	ldi	r24, 0xC4	; 196
  f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
				TWDR = 0x48; // Send address 0x48 (ASCII 'H')
  f4:	88 e4       	ldi	r24, 0x48	; 72
  f6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  fa:	08 95       	ret
				} else if (strcmp(receivedData, "Hello") == 0) {
  fc:	65 e0       	ldi	r22, 0x05	; 5
  fe:	71 e0       	ldi	r23, 0x01	; 1
 100:	8d e0       	ldi	r24, 0x0D	; 13
 102:	91 e0       	ldi	r25, 0x01	; 1
 104:	0e 94 c7 00 	call	0x18e	; 0x18e <strcmp>
 108:	89 2b       	or	r24, r25
 10a:	39 f4       	brne	.+14     	; 0x11a <i2c_receive_event+0x66>
				TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWEA);
 10c:	84 ec       	ldi	r24, 0xC4	; 196
 10e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
				TWDR = 0x50; // Send address 0x50 (ASCII 'P')
 112:	80 e5       	ldi	r24, 0x50	; 80
 114:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 118:	08 95       	ret
				} else {
				TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWEA);
 11a:	84 ec       	ldi	r24, 0xC4	; 196
 11c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
				TWDR = '\0'; // Send null terminator (no response)
 120:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 124:	08 95       	ret

00000126 <__vector_24>:
			}
		}
	}
}

ISR(TWI_vect) {
 126:	1f 92       	push	r1
 128:	0f 92       	push	r0
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	0f 92       	push	r0
 12e:	11 24       	eor	r1, r1
 130:	2f 93       	push	r18
 132:	3f 93       	push	r19
 134:	4f 93       	push	r20
 136:	5f 93       	push	r21
 138:	6f 93       	push	r22
 13a:	7f 93       	push	r23
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	af 93       	push	r26
 142:	bf 93       	push	r27
 144:	ef 93       	push	r30
 146:	ff 93       	push	r31
	switch (TW_STATUS) {
 148:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 14c:	88 7f       	andi	r24, 0xF8	; 248
 14e:	80 36       	cpi	r24, 0x60	; 96
 150:	11 f0       	breq	.+4      	; 0x156 <__vector_24+0x30>
 152:	80 38       	cpi	r24, 0x80	; 128
 154:	19 f4       	brne	.+6      	; 0x15c <__vector_24+0x36>
		case TW_SR_SLA_ACK:
		case TW_SR_DATA_ACK:
		i2c_receive_event();
 156:	0e 94 5a 00 	call	0xb4	; 0xb4 <i2c_receive_event>
		break;
 15a:	03 c0       	rjmp	.+6      	; 0x162 <__vector_24+0x3c>
		default:
		TWCR = (1<<TWEN) | (1<<TWEA) | (1<<TWINT);
 15c:	84 ec       	ldi	r24, 0xC4	; 196
 15e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		break;
	}
}
 162:	ff 91       	pop	r31
 164:	ef 91       	pop	r30
 166:	bf 91       	pop	r27
 168:	af 91       	pop	r26
 16a:	9f 91       	pop	r25
 16c:	8f 91       	pop	r24
 16e:	7f 91       	pop	r23
 170:	6f 91       	pop	r22
 172:	5f 91       	pop	r21
 174:	4f 91       	pop	r20
 176:	3f 91       	pop	r19
 178:	2f 91       	pop	r18
 17a:	0f 90       	pop	r0
 17c:	0f be       	out	0x3f, r0	; 63
 17e:	0f 90       	pop	r0
 180:	1f 90       	pop	r1
 182:	18 95       	reti

00000184 <main>:

int main(void) {
	initI2C_slave(SLAVE_ADDRESS);
 184:	89 e2       	ldi	r24, 0x29	; 41
 186:	0e 94 53 00 	call	0xa6	; 0xa6 <initI2C_slave>
	sei();
 18a:	78 94       	sei
 18c:	ff cf       	rjmp	.-2      	; 0x18c <main+0x8>

0000018e <strcmp>:
 18e:	fb 01       	movw	r30, r22
 190:	dc 01       	movw	r26, r24
 192:	8d 91       	ld	r24, X+
 194:	01 90       	ld	r0, Z+
 196:	80 19       	sub	r24, r0
 198:	01 10       	cpse	r0, r1
 19a:	d9 f3       	breq	.-10     	; 0x192 <strcmp+0x4>
 19c:	99 0b       	sbc	r25, r25
 19e:	08 95       	ret

000001a0 <_exit>:
 1a0:	f8 94       	cli

000001a2 <__stop_program>:
 1a2:	ff cf       	rjmp	.-2      	; 0x1a2 <__stop_program>
