
DualUART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000001d4  00000268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800114  00800114  0000027c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a19  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007fe  00000000  00000000  00000d65  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000042c  00000000  00000000  00001563  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a0  00000000  00000000  00001990  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ff  00000000  00000000  00001a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000123  00000000  00000000  00001e2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001f52  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ed       	ldi	r30, 0xD4	; 212
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e1       	ldi	r26, 0x14	; 20
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 32       	cpi	r26, 0x23	; 35
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

extern char buffer[BUFFER_SIZE]; //Buffer para la recepción de la comunicación serial.


int main() {
	vSerialInit(); // Inicializar la comunicación Serial.
  a6:	0e 94 8a 00 	call	0x114	; 0x114 <vSerialInit>
	
	DDRD |= (1<<DDD2); // Habilitar PIND2 como salida
  aa:	8a b1       	in	r24, 0x0a	; 10
  ac:	84 60       	ori	r24, 0x04	; 4
  ae:	8a b9       	out	0x0a, r24	; 10
	
	sei(); // Habilita las interrupciones.
  b0:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	87 ea       	ldi	r24, 0xA7	; 167
  b4:	91 e6       	ldi	r25, 0x61	; 97
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <main+0x10>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0x16>
  bc:	00 00       	nop


	while(1) {
		// Sección para la lectura y confirmación del dato recibido para tomar acción
		_delay_ms(100); // Delay para la recepción de los datos del UART
		vREADString(buffer); // Lectura del carácter recibido.
  be:	84 e1       	ldi	r24, 0x14	; 20
  c0:	91 e0       	ldi	r25, 0x01	; 1
  c2:	0e 94 ba 00 	call	0x174	; 0x174 <vREADString>
		
		if (strcmp(buffer, "A") == 0){
  c6:	62 e0       	ldi	r22, 0x02	; 2
  c8:	71 e0       	ldi	r23, 0x01	; 1
  ca:	84 e1       	ldi	r24, 0x14	; 20
  cc:	91 e0       	ldi	r25, 0x01	; 1
  ce:	0e 94 df 00 	call	0x1be	; 0x1be <strcmp>
  d2:	89 2b       	or	r24, r25
  d4:	59 f4       	brne	.+22     	; 0xec <main+0x46>
			PORTD ^= (1<<PORTD2);
  d6:	9b b1       	in	r25, 0x0b	; 11
  d8:	84 e0       	ldi	r24, 0x04	; 4
  da:	89 27       	eor	r24, r25
  dc:	8b b9       	out	0x0b, r24	; 11
		vWRITEString("Cake>"); // Envío de la línea recibida
  de:	84 e0       	ldi	r24, 0x04	; 4
  e0:	91 e0       	ldi	r25, 0x01	; 1
  e2:	0e 94 a6 00 	call	0x14c	; 0x14c <vWRITEString>
		vWRITEChar('\r'); // Salto de línea
  e6:	8d e0       	ldi	r24, 0x0D	; 13
  e8:	0e 94 9f 00 	call	0x13e	; 0x13e <vWRITEChar>
	}
	
		if (strcmp(buffer, "B") == 0){
  ec:	6a e0       	ldi	r22, 0x0A	; 10
  ee:	71 e0       	ldi	r23, 0x01	; 1
  f0:	84 e1       	ldi	r24, 0x14	; 20
  f2:	91 e0       	ldi	r25, 0x01	; 1
  f4:	0e 94 df 00 	call	0x1be	; 0x1be <strcmp>
  f8:	89 2b       	or	r24, r25
  fa:	d9 f6       	brne	.-74     	; 0xb2 <main+0xc>
			PORTD ^= (1<<PORTD2);
  fc:	9b b1       	in	r25, 0x0b	; 11
  fe:	84 e0       	ldi	r24, 0x04	; 4
 100:	89 27       	eor	r24, r25
 102:	8b b9       	out	0x0b, r24	; 11

		vWRITEString("Hello>"); // Envío de la línea recibida
 104:	8c e0       	ldi	r24, 0x0C	; 12
 106:	91 e0       	ldi	r25, 0x01	; 1
 108:	0e 94 a6 00 	call	0x14c	; 0x14c <vWRITEString>
		vWRITEChar('\r'); // Salto de línea
 10c:	8d e0       	ldi	r24, 0x0D	; 13
 10e:	0e 94 9f 00 	call	0x13e	; 0x13e <vWRITEChar>
 112:	cf cf       	rjmp	.-98     	; 0xb2 <main+0xc>

00000114 <vSerialInit>:
#include <util/delay.h>
#include "serial.h"
int tambuf = -1;

void vSerialInit(void){
	CLKPR = 0x80;
 114:	e1 e6       	ldi	r30, 0x61	; 97
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 e8       	ldi	r24, 0x80	; 128
 11a:	80 83       	st	Z, r24
	CLKPR = 0x00;
 11c:	10 82       	st	Z, r1
	UCSR0A = (0<<TXC0)|(1<<U2X0)|(0<<MPCM0);
 11e:	82 e0       	ldi	r24, 0x02	; 2
 120:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	UCSR0B = (0<<RXCIE0)|(0<<TXCIE0)|(0<<UDRIE0)|(1<<RXEN0)|(1<<TXEN0)|(0<<UCSZ02)|(0<<TXB80);
 124:	88 e1       	ldi	r24, 0x18	; 24
 126:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00) | (0 << USBS0);
 12a:	86 e0       	ldi	r24, 0x06	; 6
 12c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	UBRR0 = 103; //(F_CPU/8/9600)-1; // Alexis. //103 para 8Mhz 9600, 260 para 20Mhz 9600
 130:	87 e6       	ldi	r24, 0x67	; 103
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 138:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 13c:	08 95       	ret

0000013e <vWRITEChar>:
}

void vWRITEChar(char data){  //Escritura de un solo caracter.
	while ( !( UCSR0A & (1<<UDRE0)) );
 13e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 142:	95 ff       	sbrs	r25, 5
 144:	fc cf       	rjmp	.-8      	; 0x13e <vWRITEChar>
	UDR0 = data;
 146:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 14a:	08 95       	ret

0000014c <vWRITEString>:
}


void vWRITEString(const char *str) { //Escritura de una cadena que mientras exista espacio en la cadena se enviará el dato.
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
 150:	ec 01       	movw	r28, r24
	while (*str) {
 152:	03 c0       	rjmp	.+6      	; 0x15a <vWRITEString+0xe>
		vWRITEChar(*str);
 154:	0e 94 9f 00 	call	0x13e	; 0x13e <vWRITEChar>
		str++;
 158:	21 96       	adiw	r28, 0x01	; 1
	UDR0 = data;
}


void vWRITEString(const char *str) { //Escritura de una cadena que mientras exista espacio en la cadena se enviará el dato.
	while (*str) {
 15a:	88 81       	ld	r24, Y
 15c:	81 11       	cpse	r24, r1
 15e:	fa cf       	rjmp	.-12     	; 0x154 <vWRITEString+0x8>
		vWRITEChar(*str);
		str++;
	}

}
 160:	df 91       	pop	r29
 162:	cf 91       	pop	r28
 164:	08 95       	ret

00000166 <vREADChar>:

uint8_t vREADChar() { //Lectura de un solo carácter cuando esté disponible el slot
	while (!(UCSR0A & (1 << RXC0)));
 166:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 16a:	88 23       	and	r24, r24
 16c:	e4 f7       	brge	.-8      	; 0x166 <vREADChar>
	return UDR0;
 16e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 172:	08 95       	ret

00000174 <vREADString>:


void vREADString(char* buffer) {
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	ec 01       	movw	r28, r24
	tambuf = -1; // Reiniciar tambuf después de borrar el buffer
 17a:	8f ef       	ldi	r24, 0xFF	; 255
 17c:	9f ef       	ldi	r25, 0xFF	; 255
 17e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 182:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	char char_recibido;  // Caracter recibido.

	do {
		char_recibido = vREADChar();
 186:	0e 94 b3 00 	call	0x166	; 0x166 <vREADChar>
		tambuf++; // Contador para recorrer el espacio de la variable.
 18a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 18e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 192:	2f 5f       	subi	r18, 0xFF	; 255
 194:	3f 4f       	sbci	r19, 0xFF	; 255
 196:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 19a:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
		buffer[tambuf] = char_recibido; // Escritura de la cadena.
 19e:	fe 01       	movw	r30, r28
 1a0:	e2 0f       	add	r30, r18
 1a2:	f3 1f       	adc	r31, r19
 1a4:	80 83       	st	Z, r24
	} while (char_recibido != '>'); // Condición para poder salir con salto de línea, cuando se excede el buffer y cuando el timer se termina.
 1a6:	8e 33       	cpi	r24, 0x3E	; 62
 1a8:	71 f7       	brne	.-36     	; 0x186 <vREADString+0x12>

	buffer[tambuf] = '\0';  // Convertir en string para imprimir el dato recibido.
 1aa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ae:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1b2:	c8 0f       	add	r28, r24
 1b4:	d9 1f       	adc	r29, r25
 1b6:	18 82       	st	Y, r1
}
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	08 95       	ret

000001be <strcmp>:
 1be:	fb 01       	movw	r30, r22
 1c0:	dc 01       	movw	r26, r24
 1c2:	8d 91       	ld	r24, X+
 1c4:	01 90       	ld	r0, Z+
 1c6:	80 19       	sub	r24, r0
 1c8:	01 10       	cpse	r0, r1
 1ca:	d9 f3       	breq	.-10     	; 0x1c2 <strcmp+0x4>
 1cc:	99 0b       	sbc	r25, r25
 1ce:	08 95       	ret

000001d0 <_exit>:
 1d0:	f8 94       	cli

000001d2 <__stop_program>:
 1d2:	ff cf       	rjmp	.-2      	; 0x1d2 <__stop_program>
